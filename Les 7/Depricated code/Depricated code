Login servlet:

//        try {
//            BufferedReader in = new BufferedReader(new FileReader(file));
//            String str;
//            while ((str = in.readLine()) != null) {
//
//                String[]ar = str.split("-");
//                if (email.equals(ar[0])&&password.equals(ar[1])){
//                    user = ar[3]+" "+ar[2];
//                    succes=true;
//                    break;
//                }
//            }
//
//            in.close();
//        } catch (IOException e) {
//            System.out.println("File Read Error");
//        }

//        String loggedusers = req.getServletContext().getRealPath("/")+"loggedusers.txt";
//        PrintWriter pw = new PrintWriter(new FileWriter(loggedusers));
//        pw.println(email);
//        pw.flush();
//        pw.close();

//        String file = req.getServletContext().getRealPath("/")+"users.txt";

//        req.setAttribute("succes","<div class=\"alert alert-success\" role=\"alert\" style=\"margin-top:20px;\">Login succesvol.</div>");

Register Servlet

            //String file = req.getServletContext().getRealPath("/")+"users.txt";
            //BufferedWriter out = new BufferedWriter(new FileWriter(file,true));
			//out.write(email +"-"+ password +"-"+ firstname +"-"+ surName +"-"+ address +"-"+ country+ "\n");
            //out.close();

Logout Servlet

        String loggedusers = req.getServletContext().getRealPath("/")+"loggedusers.txt";
        //removeLineFromFile(loggedusers, ((User)req.getSession().getAttribute("loggedInuser")).getEmail());

public void removeLineFromFile(String file, String lineToRemove) {
        try {
            File inFile = new File(file);

            if (!inFile.isFile()) {
                System.out.println("Parameter is not an existing file");
                return;
            }

            //Construct the new file that will later be renamed to the original filename.
            File tempFile = new File(inFile.getAbsolutePath() + ".tmp");

            BufferedReader br = new BufferedReader(new FileReader(file));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            String line = null;

            //Read from the original file and write to the new
            //unless content matches data to be removed.
            while ((line = br.readLine()) != null) {
                if (!line.trim().equals(lineToRemove)) {
                    line = line.replace("\n", "");
                    pw.println(line);
                    pw.flush();
                }
            }
            pw.close();
            br.close();

            //Delete the original file
            if (!inFile.delete()) {
                System.out.println("Could not delete file");
                return;
            }

            //Rename the new file to the filename the original file had.
            if (!tempFile.renameTo(inFile))
                System.out.println("Could not rename file");

        }
        catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
        catch (IOException ex) {
            ex.printStackTrace();
        }
    }

registration.jsp



            if (errorMessage != null) errorMessage = (String) request.getAttribute("errorMessage");
            if (userNameNull != null) userNameNull = nullError;
            if (realNameNull != null) realNameNull = nullError;
            if (emailNull != null) emailNull = nullError;
            if (emailRepeatError != null) emailRepeatError = nullError;
            if (passwordNull != null) passwordNull = nullError;
            if (passwordRepeatError != null) passwordRepeatError = nullError;
            if (addressNull != null) addressNull = nullError;
            if (countryNull != null) countryNull = nullError;

Filter
            package security;

                        import java.io.IOException;
                        import javax.servlet.*;
                        import javax.servlet.http.HttpServletRequest;

                        public class SecurityFilter implements Filter {

                            public void init(FilterConfig arg0) throws ServletException {
                                    /* Filter is being placed into service, do nothing. */
                            }

                            public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
                                    throws IOException, ServletException {

                                HttpServletRequest r2 = (HttpServletRequest)req;

                                if(r2.getSession().getAttribute("user") == null) {
                                    //r2.getRequestDispatcher("/login.jsp").forward(req, resp);
                                } else{
                                    chain.doFilter(req, resp);
                                }
                            }
                            public void destroy() {
                                    /* Filter is being taken out of service, do nothing. */
                            }
                        }

Login Servlet Les 7:
//        // Error messages
//        String notificationInit = "<div class=\"notificationBox\"><div class=\"notificationMessage notificationError";
//        String notificationLoginFailed = notificationInit+"\">Gebruikersnaam en/of wachtwoord incorrect.</div></div>";
//        // Initialize user
//        User user = null;
//        // Create default user and user Attribute
//        boolean exists = false;
//        for(User savedUser : (ArrayList<User>)req.getServletContext().getAttribute("usersList")){
//            if (savedUser.getUserName().equals("admin")) exists = true;
//        } if (!exists) {
//            user = new User(getServletConfig().getInitParameter("userName"), null, getServletConfig().getInitParameter("password"), "admin", null, null);
//            ArrayList<User> users = (ArrayList) servletContext.getAttribute("usersList");
//            users.add(user);
//            servletContext.setAttribute("usersList", users);
//        }

//        // Logged in users attribute
//        ArrayList loggedInUsers = (ArrayList) servletContext.getAttribute("loggedInUsers");
//        // Boolean login attempt
//        boolean success = false;
//        // Checks all users for match
//        for(User savedUser : (ArrayList<User>)req.getServletContext().getAttribute("usersList")){
//            if (savedUser.getUserName().equals(username)&& savedUser.getPassword().equals(password)){
//                success = true;
//                user = savedUser;
//            }
//        }
//        // Login attempt successful
//        if (success) {
//            // Log user login's
//            Logger.getLogger("listener.SessionCounterListener").info(
//                    "User "+user.getUserName()+" login!\nAmount of online users: "+SessionCounterListener.getTotalActiveSession()+".");
//            // Adds user to session
//            req.getSession().setAttribute("loggedInUser", user);
//            // Add logged in users
//            if(loggedInUsers == null)
//                loggedInUsers = new ArrayList();
//            loggedInUsers.add(user);
//            servletContext.setAttribute("loggedInUsers", loggedInUsers);
//            // Cookie username
//            if (req.getParameter("rememberUserName") != null) {
//                // Creates cookie with username
//                Cookie c = new Cookie("cookieUserName", user.getUserName());
//                // Sets cookie age
//                c.setMaxAge(2000);
//                // Adds cookie
//                resp.addCookie(c);
//            }
//            // Dispatched to welcome page
//            req.setAttribute("welcomeMessage", "U bent succesvol ingelogd en kan nu beginnen met bloggen.");
//            rd = req.getRequestDispatcher("/secure/welcome.jsp");
//          // Login attempt failed
//        } else {
//            // Log login attempt fails
//            Logger.getLogger("listener.SessionCounterListerer").warning("Login failed for "+username+"!");
//            req.setAttribute("loginMessage", notificationLoginFailed);
//            rd = req.getRequestDispatcher("/index.jsp");
//        }
//        // Kill servlet and follow request dispatcher
//        rd.forward(req, resp);
